name: Build Front

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Check Node v
        run: node -v

      - name: Build front
        run: |
          npm install
          npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get image tag(verion)
        id: image
        run: |
          VERSION=$(echo ${{ github.sha }} | cut -c1-8)
          echo VERSION=$VERSION
          echo "::set-output name=version::$VERSION"

      - name: Build, tag image to Amazon ECR
        id: image-info
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: demo-frontend
          IMAGE_TAG: ${{ steps.image.outputs.version }}
        run: |
          echo "::set-output name=ecr_repository::$ECR_REPOSITORY"
          echo "::set-output name=image_tag::$IMAGE_TAG"
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
      
      - name: Run Trivy vulnerability scanner
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: demo-frontend
          IMAGE_TAG: ${{ steps.image.outputs.version }}
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          #image-ref: '${{ steps.login-ecr.outputs.registry}}/${{ steps.image-info.outputs.ecr_repository }}:${{ steps.image-info.outputs.image_tag }}'
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: demo-frontend
          IMAGE_TAG: ${{ steps.image.outputs.version }}
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      
      - name: Setup Kustomize
        uses: imranismail/setup-kustomize@v1

      - name: Checkout kustomize repository
        uses: actions/checkout@v2
        with:
          repository: jinseo-jang/eks-workshop-manifest
          ref: master
          token: ${{ secrets.ACTION_TOKEN }}
          path: eks-workshop-manifest

      - name: Update Kubernetes resources
        run: |
          echo ${{ steps.login-ecr.outputs.registry }}
          echo ${{ steps.image-info.outputs.ecr_repository }}
          echo ${{ steps.image-info.outputs.image_tag }}
          cd eks-workshop-manifest/kustomize/overlays/dev/
          kustomize edit set image ${{ steps.login-ecr.outputs.registry}}/${{ steps.image-info.outputs.ecr_repository }}=${{ steps.login-ecr.outputs.registry}}/${{ steps.image-info.outputs.ecr_repository }}:${{ steps.image-info.outputs.image_tag }}
          cat kustomization.yaml

      # - name: Checkout repo
      #   uses: actions/checkout@master

      # - name: Run Checkov action
      #   id: checkov
      #   uses: bridgecrewio/checkov-action@master
      #   with:
      #     directory: example/
      #     check: CKV_AWS_1 # optional: run only a specific check_id. can be comma separated list
      #     skip_check: CKV_AWS_1 # optional: skip a specific check_id. can be comma separated list
      #     quiet: true # optional: display only failed checks
      #     soft_fail: true # optional: do not return an error code if there are failed checks
      #     framework: terraform # optional: run only on a specific infrastructure {cloudformation,terraform,kubernetes,all}
      #     output_format: json # optional: the output format, one of: cli, json, junitxml, github_failed_only
      #     download_external_modules: true # optional: download external terraform modules from public git repositories and terraform registry
      #     log_level: DEBUG # optional: set log level. Default WARNING
      #     config_file: path/this_file
      #     baseline: cloudformation/.checkov.baseline # optional: Path to a generated baseline file. Will only report results not in the baseline.


      - name: Commit files
        run: |
          cd eks-workshop-manifest
          git config --global user.email "github-actions@github.com"
          git config --global user.name "github-actions"
          git commit -am "Update image tag"
          git push -u origin master